/* eslint-disable no-console */
/* eslint-disable no-lone-blocks */
// Самооценка
const printSelfcheck = () => {
  const color = 'limegreen';
  const done = `color: ${color};`;
  const textB = 'font: 1.2rem/1 Tahoma;';
  const textM = 'font: 1rem Tahoma;';
  const textS = 'font: 0.8rem Tahoma;';

  (() => {
    console.groupCollapsed('%c Самопроверка Library Part 1: 100/100', `${done}${textB}`);
    {
      console.log('%c ✔ Вёрстка валидная +10', `${done}${textB}`);

      console.groupCollapsed('%c ✔ Вёрстка семантическая +16', `${done}${textB}`);
      {
        console.log('%c В коде страницы присутствуют следующие элементы (указано минимальное количество, %c может быть больше):', textS, `${done}${textS}`);
        console.log('%c ✔ %c <header>, <main>, <footer> +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c шесть элементов <section> (по количеству секций) +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c только один заголовок <h1> +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c пять заголовков <h2> +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c один элемент <nav> (панель навигации в хедере) +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c два списка ul > li > a (панель навигации, ссылки на соцсети в футере) +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c семь кнопок <button> +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c два инпута <input> +2.', `${done}${textM}`, textS);
      }
      console.groupEnd();

      console.groupCollapsed('%c ✔ Вёрстка соответствует макету +54', `${done}${textB}`);
      {
        console.log('%c За нарушения в пунктах, которые можно проверить, снимаем по 2 балла помимо других явных ошибок, но %c не больше общего количества баллов за блок:', textS, `${done}${textS}`);

        console.groupCollapsed('%c ✔ блок <header> +8:', `${done}${textM}`);
        {
          console.log('%c ✔ %c Стараемся, чтобы текст совпадал с макетом. Если есть небольшие отклонения, то главное для нас, чтобы расстояние между элементами меню было одинаковое, 30px.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Элементы меню работают как якоря. При нажатии на один из них нас перебросит наверх соответствующего раздела.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Сами элементы меню при наведении (эффект hover) должны быть интерактивными. Обязательно курсор должен поменяться на cursor: pointer)', `${done}${textM}`, textS);
          console.log('%c ✔ %c Расстояние от самого меню до иконки пользователя - 40px. Иконка является отдельным элементом, и не входит в <nav>.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Текст "Brooklyn Public Library" находится в <h1>.', `${done}${textM}`, textS);
        }
        console.groupEnd();

        console.log('%c ✔ секция Welcome +4.', `${done}${textM}`);

        console.groupCollapsed('%c ✔ секция About +6:', `${done}${textM}`);
        {
          console.log('%c ✔ %c Добавьте все картинки, которые будут использованы в папку с картинками. Даже если отображается всего 3, в папке должны быть все 5.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Расстояния между кнопками пагинации 10px.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Интерактивная область (область нажатия, выделяемая cursor:pointer) должна быть размером +5px в каждую сторону.', `${done}${textM}`, textS);
        }
        console.groupEnd();

        console.groupCollapsed('%c ✔ секция Favorites +8:', `${done}${textM}`);
        {
          console.log('%c ✔ %c Интерактивные кнопки должны иметь структуру input type="radio" + label.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Добавьте небольшую область вокруг кнопки и надписи (например, 5px как в примере секции about).', `${done}${textM}`, textS);
          console.log('%c ✔ %c Картинок и описаний - много, для 4х секций. Их стоит добавить в проект. А лучше сразу на страницу, и скрыть с помощью CSS свойств, например display: none;.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Кнопки "buy" должны быть интерактивными, плавно менять свой цвет при наведении на них, как указано в макете styleguides.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Кнопка "own" не должна быть интерактивной, не должна нажиматься. И на ней должен присутствовать атрибут disabled.', `${done}${textM}`, textS);
        }
        console.groupEnd();

        console.log('%c ✔ секция CoffeeShop +6.', `${done}${textM}`);

        console.groupCollapsed('%c ✔ секция Contacts +6:', `${done}${textM}`);
        {
          console.log('%c ✔ %c Карту можно вставить просто картинкой. Добавлять ее отдельным сервисом не обязательно.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Везде, где в тексте встречаются цифры в виде телефонного номера, это должны быть ссылки с типом "tel" и номером.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Там, где в тексте встречается текст с именем контактного лица, это должна быть ссылка с типом "mailto" и адресом почты.', `${done}${textM}`, textS);
        }
        console.groupEnd();

        console.groupCollapsed('%c ✔ секция LibraryCard +8:', `${done}${textM}`);
        {
          console.log('%c ✔ %c "Find your Library card" - это должна быть форма с полями input.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Желательно сделать ограничения в полях input на использование только букв и цифр, а также дефиса. Но это правило проверять не нужно.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Все 3 кнопки должны быть интерактивными, плавно менять свой цвет при наведении на них, как указано в макете styleguides.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Хоть иконки из модального окна (Visits, Bonuses, Books) сейчас не нужны будут, можно их добавить в соответствующую папку проекта.', `${done}${textM}`, textS);
        }
        console.groupEnd();

        console.groupCollapsed('%c ✔ блок <footer> +8:', `${done}${textM}`);
        {
          console.log('%c ✔ %c Адрес библиотеки должен быть ссылкой (место на карте, например).', `${done}${textM}`, textS);
          console.log('%c ✔ %c Иконки соцсетей также должны быть ссылками.', `${done}${textM}`, textS);
          console.log('%c ✔ %c Вместо Username должно быть ваше имя, как оно пишется на английском языке и ссылка на GitHub.', `${done}${textM}`, textS);
        }
        console.groupEnd();
      }
      console.groupEnd();

      console.groupCollapsed('%c ✔ Общие требования к верстке +20', `${done}${textB}`);
      {
        console.log('%c ✔ %c для построения сетки используются флексы или гриды (display: flex... или display: grid...) +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c при уменьшении масштаба страницы браузера вся вёрстка (контент и фоны) размещается по центру, а не сдвигается в сторону +2. Фон за рамками страницы может быть черным, белым или любого оттенка серого.', `${done}${textM}`, textS);
        console.log('%c ✔ %c иконки добавлены в формате .svg. SVG может быть добавлен любым способом. Обращаем внимание на формат, а не на способ добавления +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c изображения добавлены в формате .jpg (.jpeg) или .png +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c есть favicon +2. Иконка должна содержать 3 буквы "BPL" (Brooklyn Public Library)', `${done}${textM}`, textS);
        console.log('%c ✔ %c плавная прокрутка по якорям +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c в футере название ссылки Username заменено и ведет на GitHub студента +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c в футере ссылка The Rolling Scopes School ведет на страницу курса https://rs.school/js-stage0/ +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c интерактивность элементов согласно макету. Интерактивность включает в себя не только изменение внешнего вида курсора при помощи свойства cursor: pointer, но и другие визуальные эффекты, например, изменение цвета фона или цвета шрифта. Если в макете указаны стили при наведении и клике, для элемента указываем эти стили. Если в макете стили не указаны, реализуете их по своему усмотрению, руководствуясь общим стилем макета +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c обязательное требование к интерактивности: плавное изменение внешнего вида элемента при наведении и клике не влияет на соседние элементы +2.', `${done}${textM}`, textS);
      }
      console.groupEnd();
    }
    console.groupEnd();
  })();

  (() => {
    console.groupCollapsed('%c Самопроверка Library Part 2: 50/50', `${done}${textB}`);
    {
      console.groupCollapsed('%c ✔ Вёрстка соответствует макету. Ширина экрана 768px +26.', `${done}${textB}`);
      {
        console.log('%c ✔ %c блок <header> +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c секция Welcome +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c секция About +4. Обратите внимание на появление новых элементов в виде стрелок и переход на 5 точек вместо 3х.', `${done}${textM}`, textS);
        console.log('%c Не нужно менять расстояние от картинки до точек, нужно оставить 40px. Оценку не снижаем, если сделано по макету (25px).', textS);
        console.log('%c ✔ %c секция Favorites +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c Сделать кнопку own, вместо buy для последней книги. Здесь важно будет соблюсти условие, что, какие кнопки находились в состояние "own" на Desktop, те же кнопки в том же состоянии будут и на Tablet. Если условие соблюдено: +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c секция CoffeeShop +4.', `${done}${textM}`, textS);
        console.log('%c Оценка снижаться не будет, если при наложении текста, не будет совпадать расположение букв, расстояние между символами, начало и конец строки, а так же орфография. Будут оцениваться межстрочный интервал, шрифт и центрирование блока с текстом по общим правилам.', textS);
        console.log('%c ✔ %c секция Contacts +4.', `${done}${textM}`, textS);
        console.log('%c ✔ %c секция LibraryCard +4.', `${done}${textM}`, textS);
        console.log('%c ✔ %c блок <footer> + 2.', `${done}${textM}`, textS);
      }
      console.groupEnd();

      console.groupCollapsed('%c ✔ Ни на одном из разрешений до 640px включительно не появляется горизонтальная полоса прокрутки. Весь контент страницы при этом сохраняется: не обрезается и не удаляется +12.', `${done}${textB}`);
      {
        console.log('%c ✔ %c нет полосы прокрутки при ширине страницы от 1440рх до 640рх +4.', `${done}${textM}`, textS);
        console.log('%c ✔ %c элементы не выходят за пределы окна браузера при ширине страницы от 1440рх до 640рх +4.', `${done}${textM}`, textS);
        console.log('%c ✔ %c элементы не наезжают друг на друга при ширине страницы от 1440рх до 640рх +4. Например, меню в хедере должно преобразоваться в бургер-меню до того, как элементы начнут наезжать друг на друга.', `${done}${textM}`, textS);
        console.log('%c все что будет происходить на ширине свыше 1440px - не оценивается. Поэтому можно либо растягивать на весь экран, либо оставить центральной колонкой.', textS);
      }
      console.groupEnd();

      console.groupCollapsed('%c ✔ На ширине экрана 768рх реализовано адаптивное меню +12 (Рекомендуется сделать появление бургер-меню на ширине 1024px): Если при ширине страницы в 768рх панель навигации не скрыта, а бургер-иконка не появилась (при этом учитывайте "Особенности проверки адаптивности в DevTools"), то ставим 0 за данный пункт, и дальше его не проверяем. Иначе:', `${done}${textB}`);
      {
        console.log('%c ✔ %c Версия Tablet, отступ иконки юзера от правого края - 105px. Такое же расстояние надо сделать и у открытого меню (сейчас там 92px). Сам крест желательно отцентрировать по центральной позиции бургер-иконки. Чтобы при переходе из одного состояния в другое ничего не прыгало. Само меню нужно прижать к правому краю целиком. Если иконка юзера не прыгает (не меняет позиции при открытии меню), независимо от величины отступа: +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c Цвет выпавшего меню должен совпадать с цветом полоски навигации. Оценка снижаться не будет, если сделано по первому макету (#000000).', `${done}${textM}`, textS);
        console.log('%c ✔ %c при нажатии на бургер-иконку плавно появляется адаптивное меню +4.', `${done}${textM}`, textS);
        console.log('%c ✔ %c при нажатии на крестик, или на область вне меню, адаптивное меню плавно скрывается, уезжая за экран +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c ссылки в адаптивном меню работают, обеспечивая плавную прокрутку по якорям при нажатии, а само адаптивное меню при этом плавно скрывается +2.', `${done}${textM}`, textS);
        console.log('%c ✔ %c размеры открытого бургер-меню соответствуют макету, так же открытое бургер-меню проверяется на PixelPerfect +2.', `${done}${textM}`, textS);
      }
      console.groupEnd();
    }
    console.groupEnd();
  })();

  (() => {
    console.log('%c Самопроверка Library Part 3: 200/200', `${done}${textB}`);

    console.groupCollapsed('%c Этап 1: Пользователь не зарегистрирован', `${done}${textB}`);
    {
      console.groupCollapsed('%c Ограниченная карусель в блоке About', textM);
      {
        console.log('%c ✔ %c Карусель реагирует на нажатие кнопок (кнопки под каруселью и стрелочки слева и справа в мобильной версии) и происходит анимация перелистывания. +15', `${done}${textM}`, textS);
        console.log('%c ✔ %c На экране шириной 1440px проверяем, чтобы было доступно 2 других скрытых картинки. При каждом нажатии выезжает следующая, и так до границ справа и слева. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Выделенная кнопка под каруселью (имеется ввиду кнопка соответствующая активному слайду и которая имеет коричневый цвет) - неактивная. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Если анимация карусели не успела завершиться, при этом нажата была следующая кнопка, то картинка не должна зависнуть в промежуточном состоянии. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c На экране шириной 768px проверяем, чтобы было доступно 4 других скрытых картинки. Для этого меняем разрешение и перезагружаем страницу. Теперь доступных перемещений становится 5. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Неактивными становятся не только выделенные кнопки, но и стрелочки на границах карусели. +2', `${done}${textM}`, textS);
      }
      console.groupEnd();

      console.groupCollapsed('%c Слайдер в блоке Favorites', textM);
      {
        console.log('%c ✔ %c "Слайдер" реагирует на нажатие кнопок панели навигации и происходит анимация затухания и проявления. +15', `${done}${textM}`, textS);
        console.log('%c ✔ %c На любой ширине экрана все 4 карточки с книгами одновременно будут плавно затухать, а затем плавно проявляться следующие. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Анимация может быть прервана следующим нажатием на кнопку выбора поры года, но при этом анимация не должна застывать в промежуточном состоянии. Если анимация не была прервана следующим нажатием кнопки, то она должна отрабатывать до конца. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Во время анимаций высота блока Favorites не должна меняться. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c ❗Панель навигации "слайдера" сделана по технологии "sticky" для разрешений с одним рядом книг (768px и меньше), т.е. опускается вниз вместе со скроллом страницы, прилипая к верхней части экрана, в рамках блока Favorites. +2', `${done}${textM}`, textS);
      }
      console.groupEnd();

      console.log('%c До регистрации', textM);
      console.log('%c ✔ %c Нажатие на кнопку Check the card ни к чему не приведёт.', `${done}${textM}`, textS);

      console.groupCollapsed('%c До авторизации', textM);
      {
        console.log('%c ✔ %c Иконка юзера в хедере отображается в виде силуэта.', `${done}${textM}`, textS);
        console.log('%c ✔ %c В блоке Favorites все кнопки должны иметь имя Buy, а не Own. +2', `${done}${textM}`, textS);
      }
      console.groupEnd();
    }
    console.groupEnd();

    console.groupCollapsed('%c Этап 2: Пользователь на этапе регистрации.', `${done}${textB}`);
    {
      console.groupCollapsed('%c Меню авторизации при нажатии на иконку пользователя', textM);
      {
        console.log('%c ✔ %c Нажатие на иконку пользователя в хедере открывает меню, которое должно оказаться под иконкой таким образом, что правый верхний угол меню находится в той же точке, что и нижний правый угол контейнера с иконкой в хедере. Меню под иконкой. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c На разрешении 768px, при открытом бургер-меню, оно закрывается и открывается меню авторизации. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c То же верно и в обратную сторону, кнопка бургер-меню должна быть доступна при открытом меню авторизации. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Нажатие на любую область или элемент вне меню приводят к закрытию меню авторизации. +2', `${done}${textM}`, textS);
      }
      console.groupEnd();

      console.groupCollapsed('%c Модальное окно REGISTER', textM);
      {
        console.log('%c ✔ %c Дизайн модального окна соответствует макету. +15', `${done}${textM}`, textS);
        console.log('%c ✔ %c При нажатии на кнопку Register в открытом меню авторизации появляется модальное окно REGISTER, где есть поля First name, Last name, E-mail и Password. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c При нажатии кнопки Sign Up в блоке Digital Library Cards также появляется модальное окно REGISTER. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Окно центрировано, а область вокруг затемнена (насколько затемнена - не имеет значения). +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c При нажатии на крестик в углу окна, или на затемнённую область вне этого окна, оно закрывается. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c В данном случае, ограничения по полям - все поля должны быть не пустыми. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Пароль должен быть не короче 8 символов. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c В поле E-mail должна быть валидация типа email. +2', `${done}${textM}`, textS);
      }
      console.groupEnd();

      console.groupCollapsed('%c Окончание регистрации', textM);
      {
        console.log('%c ✔ %c Данные сохраняются в хранилище localStorage, в том числе и пароль, хотя в реальной жизни так делать нельзя. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Иконка пользователя меняется на заглавные буквы имени. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Отображение страницы приходит в состояние после авторизации (этап 4). +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Будет сгенерирован девятизначный Card Number случайным образом в формате 16-ричного числа. +2', `${done}${textM}`, textS);
      }
      console.groupEnd();

      console.groupCollapsed('%c При наличии регистрации, но будучи не авторизованным', textM);
      {
        console.log('%c ✔ %c Блок Digital Library Cards. Если введённые имя и номер карты совпадают с данными пользователя, то отображается панель с информацией, вместо кнопки Check the card на 10 секунд. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Там же после отображения информации, кнопка возвращается в прежнее состояние, а поля в форме сбрасываются. +2', `${done}${textM}`, textS);
      }
      console.groupEnd();
    }
    console.groupEnd();

    console.groupCollapsed('%c Этап 3: Пользователь на этапе входа в учётную запись после регистрации', `${done}${textB}`);
    {
      console.groupCollapsed('%c Модальное окно LOGIN', textM);
      {
        console.log('%c ✔ %c Дизайн модального окна соответствует макету. +15', `${done}${textM}`, textS);
        console.log('%c ✔ %c При нажатии на кнопку Log In появляется модальное окно LOGIN, где есть поля E-mail or readers card и Password. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c При нажатии кнопки Log In в блоке Digital Library Cards также появляется модальное окно LOGIN. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Окно центрировано, а область вокруг затемнена (насколько затемнена - не имеет значения). +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c При нажатии на крестик в углу окна, или на затемнённую область вне этого окна, оно закрывается. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Для авторизации все поля должны быть не пустыми. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Пароль должен быть не короче 8 символов. +2', `${done}${textM}`, textS);
      }
      console.groupEnd();

      console.log('%c Блок Favorites', textM);
      console.log('%c ✔ %c Если пользователь ещё не вошёл в учётную запись, то при нажатии на любую кнопку Buy открывается модальное окно LOGIN. +2', `${done}${textM}`, textS);
    }
    console.groupEnd();

    console.groupCollapsed('%c Этап 4: Пользователь после входа в учётную запись', `${done}${textB}`);
    {
      console.groupCollapsed('%c Меню профиля при нажатии на иконку с инициалами пользователя', textM);
      {
        console.log('%c ✔ %c При наведении курсором на иконку пользователя должно отображаться полное имя пользователя (атрибут title). +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Нажатие на иконку пользователя в хедере открывает меню, которое должно оказаться под иконкой таким образом, что правый верхний угол меню находится в той же точке, что и нижний правый угол контейнера с иконкой в хедере. Меню под иконкой. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c На разрешении 768px при открытом бургер-меню, оно закрывается и открывается меню авторизации. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c То же верно и в обратную сторону, кнопка бургер-меню должна быть доступна. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Нажатие на любую область или элемент вне меню приводят к закрытию меню профиля. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c ❗Вместо надписи Profile отображается девятизначный Card Number. Для Card Number можно использовать меньший шрифт чтобы надпись вмеcтилась в контейнер, +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Нажатие на кнопку My Profile открывает модальное окно MY PROFILE. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Нажатие на кнопку Log Out приводит к выходу пользователю из состояния авторизации, возвращаемся к этапу #1. +2', `${done}${textM}`, textS);
      }
      console.groupEnd();

      console.groupCollapsed('%c Модальное окно MY PROFILE', textM);
      {
        console.log('%c ✔ %c Дизайн модального окна соответствует макету. +15', `${done}${textM}`, textS);
        console.log('%c ✔ %c В случае если имя и фамилия слишком длинные и не влазят в блок то должен произойти перенос фамилии на следующую строку.', `${done}${textM}`, textS);
        console.log('%c ✔ %c Счетчик для Visits отображает, сколько раз пользователь проходил процесс авторизации, включая самый первый - регистрацию. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Счетчик для Books отображает, сколько у пользователя книг находятся в состоянии Own. Значение варьируется 0-16. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Рядом с Card Number есть кнопка, нажатие на которую копирует код карты клиента в буфер обмена. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Окно центрировано, а область вокруг затемнена (насколько затемнена - не имеет значения). +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c При нажатии на крестик в углу окна, или на затемненную область вне этого окна, оно закрывается. +2', `${done}${textM}`, textS);
      }
      console.groupEnd();

      console.groupCollapsed('%c Блок Favorites', textM);
      {
        console.log('%c ✔ %c При нажатии на любую кнопку Buy, еще до покупки абонемента, открывается модальное окно BUY A LIBRARY CARD. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c При нажатии на любую кнопку Buy, после покупки абонемента, меняет вид кнопки на неактивную Own, добавляя единицу к счетчику книг в профиле. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Кроме того после нажатия обновляется не только счетчик, но и название книги должно отобразится в разделе Rented Books. Название формируется по принципу <название книги>, <автор книги>. В случае если название книги слишком длинное или список стал слишком большой список книг в блоке Rented Books становится скроллируемым (по необходимости горизонтально/ вертикально или оба скролла сразу) Тайтл Rented Books скроллироваться не должен +2', `${done}${textM}`, textS);
      }
      console.groupEnd();

      console.groupCollapsed('%c Модальное окно BUY A LIBRARY CARD', textM);
      {
        console.log('%c ✔ %c ❗Модальное окно нужно сделать шириной 640px. Будет это обрезка по 5px по бокам, или просто уменьшение длины с сохранением сетки - значения не имеет, хотя при правильной сеточной структуре, сделать это будет намного проще. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Дизайн модального окна соответствует макету. +15', `${done}${textM}`, textS);
        console.log('%c ✔ %c При нажатии на крестик в углу окна, или на затемнённую область вне этого окна, оно закрывается. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Для того, чтобы кнопка Buy была активна, все поля должны быть не пустыми. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Bank card number должен содержать 16 цифр. С пробелами каждые 4 символа или нет - значения не имеет. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c Expiration code содержит 2 поля с ограничением в 2 цифры. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c CVC должен содержать 3 цифры. +2', `${done}${textM}`, textS);
        console.log('%c ✔ %c После удачного нажатия на кнопку Buy, окно закрывается, и больше мы к нему не возвращаемся.', `${done}${textM}`, textS);
      }
      console.groupEnd();
      console.groupCollapsed('%c Блок Digital Library Cards', textM);
      {
        console.log('%c ✔ %c При наличии авторизации вместо кнопки Check the Card будут отображаться данные пользователя и бейджи, как на дизайне LibraryCard after login in account. +2', `${done}${textM}`, textS);
      }
      console.groupEnd();
    }
    console.groupEnd();
  })();
};

export default printSelfcheck;
